import os
from config import config
from dotenv import load_dotenv
from passlib.context import CryptContext
from fastapi_mail import FastMail, MessageSchema, ConnectionConfig

load_dotenv()

conf = ConnectionConfig(
    MAIL_USERNAME=config.MAIL_USERNAME,
    MAIL_PASSWORD=config.MAIL_PASSWORD,
    MAIL_FROM=config.MAIL_USERNAME,
    MAIL_PORT=config.MAIL_PORT,
    MAIL_SERVER=config.MAIL_SERVER,
    MAIL_FROM_NAME="Test",
    MAIL_STARTTLS=False,
    MAIL_SSL_TLS=True,
    USE_CREDENTIALS=True
)

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def verify_password(plain_password, hashed_password):
    """
    The verify_password function takes a plain-text password and a hashed password
    and verifies that the two match. It returns True if they do, False otherwise.

    :param plain_password: Pass in the password that is entered by the user
    :param hashed_password: Store the hashed password in the database
    :return: True if the password is correct, and false otherwise
    :doc-author: Trelent
    """
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    """
    The get_password_hash function takes a password as input and returns the hashed version of that password.
    The hash is generated using the pwd_context object from Flask-Bcrypt, which uses bcrypt to generate hashes.

    :param password: Get the password from the user
    :return: The hash of the password
    :doc-author: Trelent
    """
    return pwd_context.hash(password)

async def send_verification_email(email: str, token: str):
    """
    The send_verification_email function sends an email to the user with a link that they can click on to verify their email address.
    The function takes in two parameters:
        -email: The user's email address, which is used as the recipient of the verification message.
        -token: A token generated by FastAPI that will be sent along with the verification link so that we can verify it when it is clicked.

    :param email: str: Specify the email address of the user who is going to receive an email
    :param token: str: Pass the token to the send_verification_email function
    :return: A coroutine
    :doc-author: Trelent
    """
    message = MessageSchema(
        subject="Verify your email",
        recipients=[email],
        body=f"Please verify your email by clicking on the following link: http://localhost:8000/auth/verify?token={token}",
        subtype="html"
    )

    fm = FastMail(conf)
    await fm.send_message(message)